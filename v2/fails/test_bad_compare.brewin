(class operation
    (field string name "")
    (method int operate ((int x) (int y)) (return))
    (method void __init ((string n))
        (set name n)
    )
    (method string get_name () (return name))
    (method void init () (call me __init "op"))
)

(class add inherits operation
    (method void init ()
        (call me __init "add")
    )
    (method int operate ((int x) (int y))
        (return (+ x y))
    )
)

(class sub inherits add
    (method void init ()
        (call me __init "sub")
    )
    (method int operate ((int x) (int y))
        (return (call super operate x (* -1 y)))
    )
)

(class mult inherits operation
    (method void init ()
        (call me __init "mult")
    )
    (method int operate ((int x) (int y))
        (return (* x y))
    )
)

(class main
    (method operation __get_op ((int sig))
        (if (== sig 0)
            (return (new operation))
            (if (== sig 1)
                (return (new add))
                (if (== sig 2)
                    (return (new sub))
                    (if (== sig 3)
                        (return (new mult))
                        (return null)
                    )
                )
            )
        )
    )

    (method operation get_op ((int sig))
        (let ((operation out null))
            (set out (call me __get_op sig))
            (call out init)
            (return out)
        )
    )

    (method void main ()
        (let ((operation x null) (operation y null) (operation z null) (operation w null))
            (set x (call me get_op 0))
            (print (call x get_name))
            (print (call x operate 2 7))
            (set y (call me get_op 1))
            (print (call y get_name))
            (print (call y operate 2 7))
            (set z (call me get_op 2))
            (print (call z get_name))
            (print (call z operate 2 7))
            (print (== x y) " " (== y z) " " (== x z)) # fine because sub inherits add
            (set w (call me get_op 3))
            (print (== x w) (!= z w))
        )
    )
)