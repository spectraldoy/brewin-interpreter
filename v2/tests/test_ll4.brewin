(class node
    (field node next null)
    (field int val 0)
    (method void set_val ((int new_val))
        (set val new_val)
    )
    (method int get_val () (return val))
    (method void set_next ((node new_next))
        (set next new_next)
    )
    (method node get_next () (return next))
    (method node copy ()
        (return (call me copy_helper me))
    )
    (method node copy_helper ((node head))
        (let ((node out null))
            (if (== head null)
                (return out)
            )
            (set out (new node))
            (call out set_val (call head get_val))
            (call out set_next (call me copy_helper (call head get_next)))
            (return out)
        )
    )
    (method node reverse ()
        (let ((node cur null) (node cur_copy null) (node prev null))
            (set cur (call me copy))
            (while (!= cur null)
                (begin
                    (set cur_copy (call cur copy))
                    (call cur_copy set_next prev)
                    (set prev cur_copy)
                    (set cur (call cur get_next))
                )
            )
            (return prev)
        )
    )
    (method node reverse_helper ((node cur) (node prev))
        (let ((node cur_copy null))
            (if (== cur null)
                (return prev)
            )
            (set cur_copy (call cur copy))
            (call cur_copy set_next prev)
            (return (call me reverse_helper (call cur get_next) cur_copy))
        )
    )
)

(class main
    (method node create_node ((int val))
        (let ((node new_node null))
            (set new_node (new node))
            (call new_node set_val val)
            (return new_node)
        )
    )

    (method void print_ll ((node head))
        (while (!= null head)
            (begin
                (print (call head get_val))
                (set head (call head get_next))
            )
        )
    )

    (method void main ()
        (let ((node ll null) (node ll2 null))
            (set ll (new node))
            (call ll set_next (call me create_node 4))
            (call
                (call ll get_next)
                set_next
                (call me create_node 9)
            )
            (call
                (call
                    (call ll get_next)
                    get_next
                )
                set_next
                (call me create_node -22)
            )
            (call
                (call
                    (call
                        (call ll get_next)
                        get_next
                    )
                    get_next
                )
                set_next
                (call me create_node 107)
            )
            (call ll set_val 8)
            (call me print_ll ll)
            (print)
            (set ll2 (call ll reverse))
            (call me print_ll ll2)
            (print (== ll ll2))
        )
    )
)